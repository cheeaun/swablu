/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotificationsImport } from './routes/notifications'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as TagTagImport } from './routes/tag.$tag'
import { Route as ProfileActorImport } from './routes/profile.$actor'
import { Route as PostUriImport } from './routes/post.$uri'
import { Route as ListUriImport } from './routes/list.$uri'
import { Route as FeedUriImport } from './routes/feed.$uri'

// Create/Update Routes

const NotificationsRoute = NotificationsImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TagTagRoute = TagTagImport.update({
  id: '/tag/$tag',
  path: '/tag/$tag',
  getParentRoute: () => rootRoute,
} as any)

const ProfileActorRoute = ProfileActorImport.update({
  id: '/profile/$actor',
  path: '/profile/$actor',
  getParentRoute: () => rootRoute,
} as any)

const PostUriRoute = PostUriImport.update({
  id: '/post/$uri',
  path: '/post/$uri',
  getParentRoute: () => rootRoute,
} as any)

const ListUriRoute = ListUriImport.update({
  id: '/list/$uri',
  path: '/list/$uri',
  getParentRoute: () => rootRoute,
} as any)

const FeedUriRoute = FeedUriImport.update({
  id: '/feed/$uri',
  path: '/feed/$uri',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsImport
      parentRoute: typeof rootRoute
    }
    '/feed/$uri': {
      id: '/feed/$uri'
      path: '/feed/$uri'
      fullPath: '/feed/$uri'
      preLoaderRoute: typeof FeedUriImport
      parentRoute: typeof rootRoute
    }
    '/list/$uri': {
      id: '/list/$uri'
      path: '/list/$uri'
      fullPath: '/list/$uri'
      preLoaderRoute: typeof ListUriImport
      parentRoute: typeof rootRoute
    }
    '/post/$uri': {
      id: '/post/$uri'
      path: '/post/$uri'
      fullPath: '/post/$uri'
      preLoaderRoute: typeof PostUriImport
      parentRoute: typeof rootRoute
    }
    '/profile/$actor': {
      id: '/profile/$actor'
      path: '/profile/$actor'
      fullPath: '/profile/$actor'
      preLoaderRoute: typeof ProfileActorImport
      parentRoute: typeof rootRoute
    }
    '/tag/$tag': {
      id: '/tag/$tag'
      path: '/tag/$tag'
      fullPath: '/tag/$tag'
      preLoaderRoute: typeof TagTagImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/feed/$uri': typeof FeedUriRoute
  '/list/$uri': typeof ListUriRoute
  '/post/$uri': typeof PostUriRoute
  '/profile/$actor': typeof ProfileActorRoute
  '/tag/$tag': typeof TagTagRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/feed/$uri': typeof FeedUriRoute
  '/list/$uri': typeof ListUriRoute
  '/post/$uri': typeof PostUriRoute
  '/profile/$actor': typeof ProfileActorRoute
  '/tag/$tag': typeof TagTagRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/notifications': typeof NotificationsRoute
  '/feed/$uri': typeof FeedUriRoute
  '/list/$uri': typeof ListUriRoute
  '/post/$uri': typeof PostUriRoute
  '/profile/$actor': typeof ProfileActorRoute
  '/tag/$tag': typeof TagTagRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/login'
    | '/notifications'
    | '/feed/$uri'
    | '/list/$uri'
    | '/post/$uri'
    | '/profile/$actor'
    | '/tag/$tag'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/notifications'
    | '/feed/$uri'
    | '/list/$uri'
    | '/post/$uri'
    | '/profile/$actor'
    | '/tag/$tag'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/login'
    | '/notifications'
    | '/feed/$uri'
    | '/list/$uri'
    | '/post/$uri'
    | '/profile/$actor'
    | '/tag/$tag'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
  NotificationsRoute: typeof NotificationsRoute
  FeedUriRoute: typeof FeedUriRoute
  ListUriRoute: typeof ListUriRoute
  PostUriRoute: typeof PostUriRoute
  ProfileActorRoute: typeof ProfileActorRoute
  TagTagRoute: typeof TagTagRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
  NotificationsRoute: NotificationsRoute,
  FeedUriRoute: FeedUriRoute,
  ListUriRoute: ListUriRoute,
  PostUriRoute: PostUriRoute,
  ProfileActorRoute: ProfileActorRoute,
  TagTagRoute: TagTagRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/about",
        "/login",
        "/notifications",
        "/feed/$uri",
        "/list/$uri",
        "/post/$uri",
        "/profile/$actor",
        "/tag/$tag"
      ]
    },
    "/": {
      "filePath": "index.jsx"
    },
    "/about": {
      "filePath": "about.jsx"
    },
    "/login": {
      "filePath": "login.jsx"
    },
    "/notifications": {
      "filePath": "notifications.jsx"
    },
    "/feed/$uri": {
      "filePath": "feed.$uri.jsx"
    },
    "/list/$uri": {
      "filePath": "list.$uri.jsx"
    },
    "/post/$uri": {
      "filePath": "post.$uri.jsx"
    },
    "/profile/$actor": {
      "filePath": "profile.$actor.jsx"
    },
    "/tag/$tag": {
      "filePath": "tag.$tag.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
